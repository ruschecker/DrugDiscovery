#!/usr/bin/perl
# Sets the projec directory
$PROJECT="/home/boincadm/projects/DrugDiscovery/";
#$df_command="df | head -n 3 | tail -n 1 | awk \'{ print substr( \$0, length(\$0) - 6, 4 ) }\'";
#print $df_command ."\n";
#$df=system($df_command);

#print $wu_name."\n";
#use the Cwd methods
        use Cwd;
#save the original directory path
        my $orig_dir = Cwd::abs_path;
print "my directory: " . $orig_dir."\n";
chdir($PROJECT);
$ga=$ARGV[0];
chomp($ga);

$target=$ARGV[1];
chomp($target);
$bt=substr($target, 10);

# Sets the ligand file index of ligands we have
$ligand_index=$ARGV[2];
chomp($ligand_index);
#$ligand_index=$PROJECT.$ligand_index;
print $ligand_index."\n";

$ligand_dir=$ARGV[3];
chomp($ligand_dir);
#$ligand_dir=$PROJECT.$ligand_dir;
print $ligand_dir."\n";

# opens the ligand file index
open (LIGAND_FILE,$ligand_index) or die ("Error trying to open the ligand file.\n");
# Skipping all receptors yet processed for this ligand


#Set Variables
#Project Directory
$rsc_fpops_est = ($ga * 1955928030229 * 0.1);
$rsc_fpops_bound = ($rsc_fpops_est * 1000);
$delay_bound = ($rsc_fpops_est * 5);
$weight = $ga * 10;

#sleep(10);

# Sets the ligand file index of ligands we have
#$ligand_file_name="/home/boincadm/projects/DrugDiscovery/bin/concord_index.txt";

# opens the ligand file index
open (LIGAND_FILE,$ligand_index) or die ("Error trying to open the ligand file.\n");
# Skipping all receptors yet processed for this ligand

# Reads the substring of the job file takes off the last 4 characters
#$job=substr($job_file, 0, length($job_file)-4);

# prints the output so we can debug
$old_ligand="";

for ($count = 10; $count >= 1; $count--) {

$tmp=$PROJECT."/tmp_vps";

#use the Cwd methods
        use Cwd;
#save the original directory path
        my $orig_dir = Cwd::abs_path;
#clean the path string
        chomp($tmp);
#change to new directory
        chdir($tmp);


# create a time stamp
$time=`date '+%s%N'`;
chomp ($time);

$ARG="cp ".$PROJECT.$target." protein.pdb";
print $ARG."\n";
system($ARG);

$tleap="source /usr/local/amber10/dat/leap/cmd/leaprc.ff99SB
str1=loadpdb receptor.pdb
savepdb str1 receptor2.pdb
quit";
        open (MYFILE, ">>./tleap.in");
        print MYFILE $tleap."\n";        close (MYFILE);

$ARG="egrep -v HETATM protein.pdb | egrep -v CONNECT | egrep -v WAT | egrep -v HOH | egrep -v \" H \" | egrep -v \" HN \" | egrep -v \" HA1 \" | egrep -v \" HB1 \" | egrep -v \" HG1 \" | egrep -v \" HD1 \" | egrep -v \" HE1 \" | egrep -v \" HT \" > receptor.pdb";
print $ARG."\n";
system($ARG);

$ARG="tleap -s -f tleap.in > tleap.out";
print $ARG."\n";
system($ARG);

$ARG="pdb2gmx -ff amber99sb -f receptor2.pdb -water spce -ignh -missing";
print $ARG."\n";
system($ARG);

exit;

#Copy the em.mdp parameter file to current working directory
        $ARG15="cp ".$PROJECT."/bin/em.mdp .";
        print $ARG15 . "\n";
        system($ARG15);

        $ARG15="cp ".$PROJECT."/bin/em_r.mdp .";
        print $ARG15 . "\n";
        system($ARG15);

        $ARG15="cp ".$PROJECT."/bin/pr.mdp .";
        print $ARG15 . "\n";
        system($ARG15);

#Run editconf on the Complex.pdb
        $ARG15="editconf -bt triclinic -f conf.gro";
        print $ARG15 . "\n";
        system($ARG15);


#Run genbox on Complex.pdb
        $ARG16="genbox -cp out.gro";
        print $ARG16 . "\n";
        system($ARG16);



#Run the grompp
        $ARG21="grompp -f em_r.mdp -o Complex_b4ion.tpr";
        print $ARG21 . "\n";
        system($ARG21);


        $ARG18="cp topol.top Complex_ion.top";
        print $ARG18 . "\n";
        system($ARG18);

#Run genion
        $ARG19="echo 0| genion -s Complex_b4ion.tpr -o Complex_b4em.pdb -neutral -conc 0.15 -p Complex_ion.top -norandom";
        print $ARG19 . "\n";
        system($ARG19);

#rename the Complex_ion.top Complex.top
        $ARG20="mv Complex_ion.top Complex.top";
        print $ARG20 . "\n";
        system($ARG20);

exit;

#Run the grompp
        $ARG21="grompp -f em_r.mdp -c Complex_b4em.pdb -p Complex.top -o em_r.tpr";
        print $ARG21 . "\n";
        system($ARG21);

my $timeout = 180;
my $pid = fork;

if ( defined $pid ) {
  if ( $pid ) {
      # this is the parent process
      local $SIG{ALRM} = sub { die "TIMEOUT" };
      alarm 300;
      # wait until child returns or timeout occurs
      eval {
          waitpid( $pid, 0 );
      };
      alarm 0;

      if ( $@ && $@ =~ m/TIMEOUT/ ) {
          # timeout, kill the child process
          kill 9, $pid;
      }
  }
  else {
      # this is the child process
      # this call will never return. Note the use of exec instead of system
      exec "mdrun -v -s em_r.tpr";
  }
}
else {
  die "Could not fork.";
}

sleep(10);
exit;

}


#change to original
        chdir($orig_dir);


# go through the list of ligands from that ligand index
 do {$new_ligand = <LIGAND_FILE>; 
	chomp ($new_ligand);
print $new_ligand."\n";
$df=`df | head -n 3 | tail -n 1 | awk \'{ print substr( \$0, length(\$0) - 4, 2 ) }\'`;
chomp($df);
$df=$df-1;
print $df."% full\n";
if ($df >80) {
print "over 80% full \n";
sleep(3600);
}

  my $range = 1000000;
  my $seed = int(rand($range));
  print $seed . "\n";


$job="<job_desc>
    <task>
        <application>unzip</application>
        <command_line> -qq -o \"./MGLTools*.zip\" -d \".\"</command_line>
        <weight>1</weight>
    </task>
    <task>
        <application>7za.exe</application>
        <command_line> e ligand.mol2.7z</command_line>
        <weight>1</weight>
    </task>
    <task>
        <application>./Python25/python.exe</application>
        <command_line>make_sitecustomize.py \".\"</command_line>
        <weight>1</weight>
    </task>
    <task>
        <application>./Python25/python.exe</application>
        <command_line>\"./MGLToolsPckgs/Support/sitecustomize.py\"</command_line>
        <weight>1</weight>
    </task>
    <task>
        <application>./Python25/python.exe</application>
        <command_line>\"./MGLToolsPckgs/AutoDockTools/Utilities24/prepare_ligand4.py\" -l ligand.mol2 -o ligand.pdbqt</command_line>
        <weight>1</weight>
    </task>
    <task>
        <application>./Python25/python.exe</application>
        <command_line>\"./MGLToolsPckgs/AutoDockTools/Utilities24/prepare_receptor4.py\" -U nphs_lps_waters -r receptor.pdb -o receptor.pdbqt</command_line>
        <weight>1</weight>
    </task>
    <task>
        <application>./Python25/python.exe</application>
        <stdout_filename>stdout</stdout_filename>
        <stderr_filename>stderr</stderr_filename>
        <command_line>\"./MGLToolsPckgs/AutoDockTools/Utilities24/prepare_gpf4.py\" -l ligand.pdbqt -r receptor.pdbqt -p custom_parameter_file=1 -p parameter_file=AD4_parameters.dat</command_line>
        <weight>1</weight>
    </task>
    <task>
        <application>./Python25/python.exe</application>
        <stdout_filename>stdout</stdout_filename>
        <stderr_filename>stderr</stderr_filename>
        <command_line>\"./MGLToolsPckgs/AutoDockTools/Utilities24/prepare_dpf4.py\" -l ligand.pdbqt -r receptor.pdbqt -p compute_unbound_extended_flag=0 -p ga_run=".$ga." -p seed=".$seed."</command_line>
        <weight>1</weight>
    </task>
    <task>
        <application>autogrid</application>
        <stdout_filename>stdout</stdout_filename>
        <stderr_filename>stderr</stderr_filename>
        <command_line> -p receptor.gpf -l out.glg </command_line>
        <weight>1</weight>
    </task>
    <task>
        <application>autodock</application>
        <stdout_filename>stdout</stdout_filename>
        <stderr_filename>stderr</stderr_filename>
        <command_line> -p ligand_receptor.dpf -l out.dlg</command_line>
        <weight>".$weight."</weight>
        <fraction_done_filename>progress.txt</fraction_done_filename>
    </task>
    <task>
        <application>7za.exe</application>
        <stdout_filename>stdout</stdout_filename>
        <stderr_filename>stderr</stderr_filename>
        <command_line> a out.7z out.dlg out.glg receptor.gpf ligand_receptor.dpf job.xml</command_line>
        <weight>1</weight>
    </task>
</job_desc>";


#change to new directory
        chdir($PROJECT);

# error check to make sure the ligand file has data
if (length($new_ligand) > 1) {

#print $job ."\n";
$ligand=substr($new_ligand,0,length($new_ligand)-8);
print $new_ligand."\n";
sleep(10);
        open (MYFILE, ">>".$PROJECT."/job_".$ga.".xml");
        print MYFILE $job."\n";
        close (MYFILE);


# copy the ligand file from our ligand directory and place in download. Note simply copy and paste wont work
# BOINC requires you place input in a special directory that is specified by dir_hier_path
$ARG="cp ".$ligand_dir."/".$new_ligand." \`/home/boincadm/projects/DrugDiscovery/bin/dir_hier_path  ".$ligand."_".$time.".7z\`";
print $ARG ."\n";

# Use system because other methods of running system commands will not wait until termination.
# For example if you run backtick with these copies, files will not be in the download directory when expected
system($ARG);

# Copy the job file
$ARG="mv ".$PROJECT."job_".$ga.".xml \`/home/boincadm/projects/DrugDiscovery/bin/dir_hier_path job_".$ga."_".$time."\`";
print $ARG ."\n";
system($ARG);

# copy the protein!
$ARG="cp ".$PROJECT.$target." \`/home/boincadm/projects/DrugDiscovery/bin/dir_hier_path fzd8min_renum_SS.pdb".$time."\`";
print $ARG ."\n";
system($ARG);

# Now we create the workunit!!!! we give it a name specific to the job file_ligand_timestamp
$ARG=$PROJECT."bin/create_work -appname autodock_mgl -wu_name autodock_ga_run_".$ga."_bt_".$bt."_lig_".$ligand."_ts_".$time." -wu_template /home/boincadm/projects/DrugDiscovery/templates/ad_wu_mgl -result_template ../templates/ad_mgl_result --rsc_fpops_est ".$rsc_fpops_est." --rsc_fpops_bound ".$rsc_fpops_bound." --delay_bound ".$delay_bound." ".$ligand."_".$time.".7z fzd8min_renum_SS.pdb".$time." job_".$ga."_".$time;
print $ARG ."\n";
system($ARG);

#sleep(30);
# summary_job4.txt";
# pal_wnt_bind.txt";

	#print $ARG3 . "\n";

	# runs the create project script
	#system($ARG3) == 0
        #or die "system @ARG3 failed: $?";
	#sleep(10);
}

    } while ($ligand ne $old_ligand);

close (LIGAND_FILE);

chdir($orig_dir);

